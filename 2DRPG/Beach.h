#pragma once
#include  <SFML/Graphics.hpp>
#include "Map.h"
#include "Input.h"
#include <thread>
#include <functional>
#include <mutex>
#include <iostream>
#include <fstream>
#include <condition_variable>

struct gridLocation {

	bool solid;
	int icon;
	bool center;
	GameSprite* sprite;
	int xPos;
	int yPos;
};

class Beach :
	public Map
{
public:
	Beach();
	~Beach();
	void initialize(sf::RenderWindow* wind);
	void inputControl(DIRECTION direction);
	void update(float deltaTime);
	void render(float deltaTime);
	void onExit();
	
private:
	void renderBeach(int lower, int upper, int yPos);
	void renderMovingBeachOrig(int lower, int upper, int yPos, int xPos, int threadNum);
	void Beach::movingThreadCheck();

	void threadMovingBeach(int lower, int upper, int yPosLower, int yPosLimit, sf::Vector2i* position, sf::Vector2i* tracker, int threadNum);
	void threadBeach(int lower, int upper, int yPos);
	void threadRenderBeach();

	void animations(float deltaTime);

	std::mutex countCheck;
	std::mutex boolCheck;

	sf::RenderWindow* window;


	gridLocation grid[27][27];
	int map[27][27] = {
	   //00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24	25 26	
		{00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//00
		{00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//00
		{00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//01
		{00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//02
		{00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//03
		{00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//04
		{00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//05
		{00,00,00,00,00,00,00,13,14,14,14,14,14,14,14,14,14,14,14,15,00,00,00,00,00,00,00},//06
		{00,00,00,00,00,00,00,12,10,10,10,10,10,10,10,10,10,10,10,16,00,00,00,00,00,00,00},//07
		{00,00,00,00,00,00,00,12,10,10,10,10,10,10,10,10,10,10,10,16,00,00,00,00,00,00,00},//08
		{00,00,00,00,00,00,00,12,10,10,10,21,10,10,10,10,10,10,10,16,00,00,00,00,00,00,00},//09
		{00,00,00,00,00,00,00,12,10,10,10,10,10,10,10,10,10,10,10,16,00,00,00,00,00,00,00},//10
		{00,00,00,00,00,00,00,12,10,10,10,10,10,10,10,10,21,10,10,16,00,00,00,00,00,00,00},//11
		{00,00,00,00,00,00,00,12,10,10,10,10,10,10,10,10,10,10,10,16,00,00,00,00,00,00,00},//12
		{00,00,00,00,00,00,00,12,10,10,10,10,10,10,10,10,10,10,10,16,00,00,00,00,00,00,00},//13
		{00,00,00,00,00,00,00,12,10,10,10,21,10,10,10,10,10,10,10,16,00,00,00,00,00,00,00},//14
		{00,00,00,00,00,00,00,12,10,10,10,10,10,10,10,10,10,10,10,16,00,00,00,00,00,00,00},//15
		{00,00,00,00,00,00,00,12,10,10,10,10,10,10,21,10,10,10,10,16,00,00,00,00,00,00,00},//16
		{00,00,00,00,00,00,00,12,10,10,10,10,10,10,10,10,10,10,10,16,00,00,00,00,00,00,00},//17
		{00,00,00,00,00,00,00,11,18,18,18,18,18,18,18,18,18,18,18,17,00,00,00,00,00,00,00},//18
		{00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//19
		{00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//20
		{00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//21
		{00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//22
		{00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//23
		{00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//24
		{00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00} //00
	};

	/**
	00 = Water
	11 = Bottom Left Corner Wall
	12 = Left Wall
	13 = Top Left Corner Wall
	14 = Top Wall
	15 = Top Right Corner Wall
	16 = Right Wall
	17 = Bottom Right Corner Wall
	18 = Bottom Wall
	10 = Grass
	19 = Sand
	20 = Dirt
	21 = Flower
	*/

	//Condition Variable Code.
	std::mutex CVM;
	std::condition_variable cv;
	bool ready = false;


protected:
};




